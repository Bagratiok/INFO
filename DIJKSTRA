import math
 
 
class Graphe():
 
    def __init__(self, noeuds):
        self.matriceAdj = noeuds.copy() #pk pas self.matriceAdj = noeuds ?
 
    def Afficher(self, src, dist):
        print("les chemins les plus courts allant de ", src, " est : ")
        for noeud in range(len(self.matriceAdj)):
            print((noeud+1), "\t", dist[noeud])
 
    def minDistance(self, dist, S, T):
 
        # Initialiser la distance minimale pour le nœud
        min = math.inf
        min_index = -1
 
        for v in T:
            if dist[v-1] < min:
                min = dist[v-1]
                min_index = v-1
 
        # supprimer de T et ajouter dans S
        T.remove(min_index+1)
        S.append(min_index+1)
        return min_index
 
    def dijkstra(self, src):
 
        dist = [math.inf] * len(self.matriceAdj)
        precedence = [-1] * len(self.matriceAdj)
        dist[src-1] = 0
        precedence[src-1] = src-1
        S = []
        T = [(i+1) for i in range(len(self.matriceAdj))]
 
        while len(S) < len(self.matriceAdj):
 
            # Choisir un sommet u qui n'est pas dans l'ensemble S et
            # qui a une valeur de distance minimale
            u = self.minDistance(dist, S, T)
 
            # relaxation des sommets
            for v in range(len(self.matriceAdj)):
                if (self.matriceAdj[u][v] > 0) and (dist[v] > (dist[u] + self.matriceAdj[u][v])):
                    dist[v] = dist[u] + self.matriceAdj[u][v]
                    precedence[v] = u
        self.Afficher(src, dist)
 
 
# Test
# les sommets sont numérotés à partir de 1
matriceAdj = [[0, 2, 4, 0, 0, 0],
              [0, 0, 1, 0, 7, 0],
              [0, 0, 0, 3, 0, 0],
              [0, 0, 0, 0, 2, 5],
              [0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0],
              ]
g = Graphe(matriceAdj)
g.dijkstra(1)

#joséphine: j'ai fait deux questions du sujet des potes d'estelle

#importer le fichier
#donnees doit etre dans le meme répertoire
import Donnees
S, L = Donnees.S, Donnees.L

#classement par ordre alphabétique
s=[]
for i in range (0,len(S)) :
    s.append(S[i][0])
s.sort()

#conversion des heures
def conversion(heure):
    if (type(heure)== str) :
    #on fait l'hypothèse que l'heure est toujours sous la forme "xx:xx"
        h = int(heure[0]+heure[1])
        min = int(heure[3]+heure[4])
        minutes = h*60 + min 
        return minutes
    elif (type(heure)== int):
        div = heure//60
        reste = heure % 60
        new_heure = str(div) + ":" + str(reste)
        return new_heure

#fin joséphine

#Afficher le plan des métro parisiens
from PIL import Image
im = Image.open('plan_metro_paris.jpg')
im.show()

#Godfried

#Afficher les stations une fois la première lettre entrée (départ) :
a = 0
L1 = []
for i in L:
    if n == i[0]:
        L1.append(i)
        print(a, i)
        a += 1
start = int(input("Entrez le numéro de la station de départ : "))
station = L1[start]
print("Vous avez choisi la station de départ : ", station)
