#Algorithme de Dijkstra

import math

class Graphe():
 
    def __init__(self, noeuds):
        self.matriceAdj = noeuds.copy() #pk pas self.matriceAdj = noeuds ?
 
    def Afficher(self, src, dist):
        print("les chemins les plus courts allant de ", src, " est : ")
        for noeud in range(len(self.matriceAdj)):
            print((noeud+1), "\t", dist[noeud])
 
    def minDistance(self, dist, S, T):
 
        # Initialiser la distance minimale pour le nœud
        min = math.inf
        min_index = -1
 
        for v in T:
            if dist[v-1] < min:
                min = dist[v-1]
                min_index = v-1
 
        # supprimer de T et ajouter dans S
        T.remove(min_index+1)
        S.append(min_index+1)
        return min_index
 
    def dijkstra(self, src):
 
        dist = [math.inf] * len(self.matriceAdj)
        precedence = [-1] * len(self.matriceAdj)
        dist[src-1] = 0
        precedence[src-1] = src-1
        S = []
        T = [(i+1) for i in range(len(self.matriceAdj))]
 
        while len(S) < len(self.matriceAdj):
 
            # Choisir un sommet u qui n'est pas dans l'ensemble S et
            # qui a une valeur de distance minimale
            u = self.minDistance(dist, S, T)
 
            # relaxation des sommets
            for v in range(len(self.matriceAdj)):
                if (self.matriceAdj[u][v] > 0) and (dist[v] > (dist[u] + self.matriceAdj[u][v])):
                    dist[v] = dist[u] + self.matriceAdj[u][v]
                    precedence[v] = u
        self.Afficher(src, dist)
 
 
# Test
# les sommets sont numérotés à partir de 1
matriceAdj = [[0, 2, 4, 0, 0, 0],
              [0, 0, 1, 0, 7, 0],
              [0, 0, 0, 3, 0, 0],
              [0, 0, 0, 0, 2, 5],
              [0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0],
              ]
g = Graphe(matriceAdj)
g.dijkstra(1)

#Estelle: pour faire Dijkstra avec les données qu'on a
#J'ai utilisé les durées entre les stations (dans la liste L) qui m'ont permis de faire une matrice que j'ai appelé Mat
Mat = []
for i in L :
    Mat.append(i[3])

#j'ai compléter dans les sous-listes avec des 0 pour qu'elles aient toutes la même taille, sinon y'avait des out of range
max = 0
for m in Mat :
    if len(m)>max:
        max = len(m)
for n in Mat :
    while len(n)<max:
        n.append(0)

g = Graphe(Mat)
g.dijkstra(1)
#C'est pas exactement ça qu'il faut faire mais c'est l'idée
#J'ai pas bien compris tout le principe de l'algorithme de Dijkstra en fait je crois, parce que là je met sur le même plan toutes les stations de métro des différentes lignes c'est bizarre

#joséphine: j'ai fait deux questions du sujet des potes d'estelle

#Importer le fichier
#Donnees doit etre dans le meme répertoire
import Donnees
S, L = Donnees.S, Donnees.L

#Classement par ordre alphabétique
s=[]
for i in range (0,len(S)) :
    s.append(S[i][0])
s.sort()

#Conversion des heures
def conversion(heure):
    if (type(heure)== str) :
    #on fait l'hypothèse que l'heure est toujours sous la forme "xx:xx"
        h = int(heure[0]+heure[1])
        min = int(heure[3]+heure[4])
        minutes = h*60 + min 
        return minutes
    elif (type(heure)== int):
        div = heure//60
        reste = heure % 60
        new_heure = str(div) + ":" + str(reste)
        return new_heure

#fin joséphine

#Godfried : version modifiée le 29/12, j'ai perfectionné le programme pour éviter des erreurs et que ça soit + interactif
#j'ai également implémenter une partie pour demander l'heure de départ

#Moteur de recherche (arrivée/départ) :
confirmbis = "Non"

while confirmbis == "Non" :

    n = input("Entrez la première lettre de votre station de départ (en majuscules) : ")

    L = ['Abbesses', 'Alexandre-Dumas', 'Alma-Marceau', 'Alésia', 'Anatole-France', 'Anvers', 'Argentine', 'Arts-et-Métiers', 'Asnières-Gennevilliers Les Courtilles', 'Assemblée Nationale', 'Aubervilliers Pantin (4 Chemins)', 'Avenue Emile-Zola', 'Avron', 'Balard', 'Barbès-Rochechouart', 'Bastille', 'Bel-Air', 'Belleville', 'Bercy', 'Bibliothèque-François Mitterrand', 'Billancourt', 'Bir-Hakeim (Grenelle)', 'Blanche', 'Bobigny-Pablo-Picasso', 'Bobigny-Pantin (Raymond Queneau)', 'Boissière', 'Bolivar', 'Bonne Nouvelle', 'Botzaris', 'Boucicaut', 'Boulogne Pont de Saint-Cloud', 'Boulogne-Jean-Jaurès', 'Bourse', 'Brochant', 'Bréguet-Sabin', 'Buttes-Chaumont', 'Buzenval', 'Bérault', 'Cadet', 'Cambronne', 'Campo-Formio', 'Cardinal-Lemoine', 'Censier-Daubenton', 'Champs-Elysées-Clémenceau', 'Charenton-Ecoles', 'Charles Michels', 'Charles de Gaulle-Etoile', 'Charonne', "Chaussée d'Antin", 'Chemin Vert', 'Chevaleret', 'Château Landon', 'Château Rouge', "Château d'Eau", 'Château de Vincennes', 'Châtelet', 'Châtillon Montrouge', 'Cité', 'Cluny-La Sorbonne', 'Colonel Fabien', 'Commerce', 'Concorde', 
'Convention', 'Corentin-Cariou', 'Corentin-Celton', 'Corvisart', 'Cour Saint-Emilion', 'Courcelles', 'Couronnes', 'Crimée', 'Croix-de-Chavaux (Jacques Duclos)', "Créteil-L'Echat (Hôpital Henri Mondor)", 'Créteil-Préfecture (Hôtel de Ville)', 'Créteil-Université', 'Daumesnil (Félix Eboué)', 'Denfert-Rochereau', 'Dugommier', 'Dupleix', 'Duroc', 'Ecole Militaire', 'Ecole Vétérinaire de Maisons-Alfort', 'Edgar-Quinet', 'Eglise de Pantin', 'Esplanade de la Défense', 'Etienne Marcel', 'Europe', 'Exelmans', 'Faidherbe-Chaligny', 'Falguière', 'Filles du Calvaire', "Fort d'Aubervilliers", 'Franklin-Roosevelt', 'Front Populaire', 'Félix Faure', 'Gabriel-Péri', 'Gallieni (Parc de Bagnolet)', 'Gambetta', "Gare d'Austerlitz", 'Gare de Lyon', "Gare de l'Est (Verdun)", 'Gare du Nord', 'Gaîté', 'George V', 'Glacière', 'Goncourt (Hôpital Saint-Louis)', 'Grands Boulevards', 'Havre-Caumartin', 
'Hoche', 'Hôtel de Ville', 'Invalides', 'Iéna', 'Jacques-Bonsergent', 'Jasmin', 'Jaurès', 'Javel-André-Citroen', 'Jourdain', 'Jules Joffrin', 'Jussieu', 'Kléber', 'La Chapelle', 'La Courneuve-8-Mai-1945', 'La Défense (Grande Arche)', 'La Fourche', 'La Motte-Picquet-Grenelle', 'La Muette', 'La Tour-Maubourg', 'Lamarck-Caulaincourt', 'Laumière', 'Le Kremlin-Bicêtre', 'Le Peletier', 'Ledru-Rollin', 'Les Agnettes', 'Les Gobelins', 'Les Halles', "Les Sablons (Jardin d'acclimatation)", 'Liberté', 'Liège', 'Louis Blanc', 'Louise Michel', 'Lourmel', 'Louvre-Rivoli', 'Mabillon', 'Madeleine', "Mairie d'Issy", 'Mairie de Clichy', 'Mairie de Montreuil', 'Mairie de Montrouge', 'Mairie des Lilas', 'Maison Blanche', 'Maisons-Alfort-Les Juilliottes', 'Maisons-Alfort-Stade', 'Malakoff-Plateau de Vanves', 'Malakoff-Rue Etienne Dolet', 'Malesherbes', 'Maraîchers', 'Marcadet-Poissonniers', 'Marcel Sembat', 'Marx-Dormoy', 'Maubert-Mutualité', 'Michel Bizot', 'Michel-Ange-Auteuil', 'Michel-Ange-Molitor', 'Miromesnil', 'Monceau', 'Montgallet', 'Montparnasse-Bienvenue', 'Mouton-Duvernet', 'Ménilmontant', 'Nation', 'Nationale', 'Notre-Dame de Lorette', 'Notre-Dame des Champs', 'Oberkampf', 'Odéon', 'Olympiades', 'Opéra', 'Ourcq', 'Palais-Royal (Musée du Louvre)', 'Parmentier', 'Passy', 'Pasteur', 'Pelleport', 'Pereire', 'Pernety', 'Philippe Auguste', 'Picpus', 'Pigalle', 'Place Monge (Jardin des Plantes)', "Place d'Italie", 'Place de Clichy', 'Place des Fêtes', 'Plaisance', 'Pointe du Lac', 'Poissonnière', 'Pont Marie (Cité des Arts)', 'Pont Neuf', 'Pont de Levallois-Bécon', 'Pont de Neuilly', 'Pont de Sèvres', 'Porte Dauphine (Maréchal de Lattre de Tassigny)', 
'Porte Dorée', 'Porte Maillot', "Porte d'Orléans (Général Leclerc)", 'Porte de Bagnolet', 'Porte de Champerret', 'Porte de Charenton', 'Porte de Clichy', 'Porte de Clignancourt', 'Porte de Montreuil', 'Porte de Pantin', 'Porte de Saint-Cloud', 'Porte de Vanves', 'Porte de Versailles', 'Porte de Vincennes', 'Porte de la Chapelle', 'Porte de la Villette', 'Porte des Lilas', 'Pré-Saint-Gervais', 'Pyramides', 'Pyrénées', 'Père-Lachaise', 'Quai de la Gare', 'Quai de la Rapée', 'Quatre Septembre', 'Rambuteau', 'Ranelagh', 'Raspail', 'Rennes', 'Reuilly-Diderot', 'Richard-Lenoir', 'Richelieu-Drouot', 'Riquet', 'Robespierre', 'Rome', 'Rue Saint-Maur', 'Rue de la Pompe (Avenue Georges Mandel)', 'Rue des Boulets', 'Rue du Bac', 'Réaumur-Sébastopol', 'République', 'Saint-Ambroise', 'Saint-Augustin', 'Saint-Fargeau', 'Saint-François-Xavier', 'Saint-Georges', 'Saint-Germain des Prés', 'Saint-Jacques', 'Saint-Lazare', 'Saint-Mandé', 'Saint-Marcel', 'Saint-Michel', 'Saint-Paul (Le Marais)', 'Saint-Philippe du Roule', 'Saint-Placide', 'Saint-Sulpice', 'Saint-Sébastien-Froissart', 'Sentier', 'Simplon', 'Solférino', 'Stalingrad', 'Strasbourg-Saint-Denis', 'Sully-Morland', 'Sèvres-Babylone', 'Sèvres-Lecourbe', 'Ségur', 'Temple', 'Ternes', 'Tolbiac', "Trinité-d'Estienne d'Orves", 'Trocadéro', 'Tuileries', 'Télégraphe', 'Vaneau', 'Varenne', 'Vaugirard (Adolphe Chérioux)', 'Vavin', 'Victor Hugo', 'Villejuif-Louis Aragon', 'Villejuif-Léo Lagrange', 'Villejuif-Paul Vaillant Couturier (Hôpital Paul Brousse)', 'Villiers', 'Volontaires', 'Voltaire (Léon Blum)', 'Wagram']
    a = 0
    test = False
    L1 = []
    for i in L:
        if n == i[0]:
            L1.append(i)
            print(a, i)
            a += 1
            test = True
    if test == False:
        print("Votre station n'est pas répertoriée.")
        break
    start = int(input("Entrez le numéro de la station de départ : "))
    if start >= len(L1):
        break
    depart = L1[start]
    confirm = input("Vous avez choisi la station de départ : " + depart + " ; Confirmez - vous votre choix ? Entrez Oui ou Non : ")
    if confirm == "Oui":
        N = input("Entrez la première lettre de votre station d'arrivée (en majuscules) : ")
        A = 0
        test2 = False
        L2 = []
        for I in L:
            if N == I[0]:
                L2.append(I)
                print(A, I)
                A += 1
                test2 = True
        if test2 == False:
            print("Votre station n'est pas répertioriée, veuillez recommencer.")
            break
        while test2 == True:
            arrival = int(input("Entrez le numéro de la station d'arrivée : "))
            if arrival >= len(L2):
                break
            arrivee = L2[arrival]
            confirmbis = input("Vous avez choisi la station d'arrivée : " + arrivee + " ; Confirmez - vous votre choix ? Entrez Oui ou Non : ")
            if confirmbis == "Non" or arrivee == depart:
                break
            test2 = False
    else :
        break
    print("Itinéraire : " + depart + " --> " + arrivee)
    
#j'ai utilisé vla les breaks pck flemme de mettre des boucles partout pour s'y perdre    

H = input("Voulez vous partir maintenant ? Répondez Oui ou Non : ")
    if H == "Oui":
        import  datetime
        t = datetime.datetime.now()
        h = t.hour
        m = t.minute
        print("Départ de " + depart + " prévu à " + str(h) + ":" + str(m))
    else:
        heure = input("Entrez l'heure de départ (sous le format xx:xx) : ")
        print("Départ de " + depart + " prévu à " + str(conversion(heure)) + ".")

#Afficher le plan des métro parisiens
from PIL import Image
im = Image.open('plan_metro_paris.jpg')
im.show()
