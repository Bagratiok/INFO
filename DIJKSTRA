#Créer un dossier avec le jeu de données, l'image du plan des métros etc pour que ce soit plus simple (on leu envoie tout le dossier directement)

from Donnees import L, S, A


# Stations
#moteur de recherche
confirmbis = "Non"
def number(station):
    num = -1 
    while num == -1:
        for k in range(len(S)-1):
                if station == S[k][0]:
                    num = k
    return num

while confirmbis == "Non" :

    n = input("Entrez la première lettre de votre station de départ (en majuscules) : ")

    
    a = 0
    test = False
    L1 = []
    for i in A:
        if n == i[0]:
            L1.append(i)
            print(a, i)
            a += 1
            test = True
    if test == False:
        print("Votre station n'est pas répertoriée.")
        break
    start = int(input("Entrez le numéro de la station de départ : "))
    if start >= len(L1):
        break
    depart = L1[start]
    confirm = input("Vous avez choisi la station de départ : " + depart + " ; Confirmez - vous votre choix ? Entrez Oui ou Non : ") 
    if confirm == "Oui":
        start = number(depart) #je change start (puis arrival) pour que ça coïncide avec S
        N = input("Entrez la première lettre de votre station d'arrivée (en majuscules) : ")
        T = 0
        test2 = False
        L2 = []
        for r in A:
            if N == r[0]:
                L2.append(r)
                print(T, r)
                T += 1
                test2 = True
        if test2 == False:
            print("Votre station n'est pas répertioriée, veuillez recommencer.")
            break
        while test2 == True:
            arrival = int(input("Entrez le numéro de la station d'arrivée : "))
            if arrival >= len(L2):
                break
            arrivee = L2[arrival]
            confirmbis = input("Vous avez choisi la station d'arrivée : " + arrivee + " ; Confirmez - vous votre choix ? Entrez Oui ou Non : ")
            if confirmbis == "Non":
                break
            arrival = number(arrivee)
            test2 = False
    else :
        break
    print("Itinéraire : " + depart + " --> " + arrivee)
           

#Si le voyageur veut partir maintenant

    def conversion(heure): #La fonction fonctionne bien ? Vérif
        if (type(heure)== str) :
    #on fait l'hypothèse que l'heure est toujours sous la forme "xx:xx"
            h = int(heure[0]+heure[1])
            min = int(heure[3]+heure[4])
            minutes = h*60 + min 
            return minutes
        elif (type(heure)== int):
            div = heure//60
            reste = heure % 60
            new_heure = str(div) + ":" + str(reste)
            return new_heure

    H = input("Voulez vous partir maintenant ? Répondez Oui ou Non : ")
    if H == "Oui":
        import  datetime
        t = datetime.datetime.now()
        h = t.hour
        m = t.minute
        print("Départ de " + depart + " prévu à " + str(h) + ":" + str(m))
    else:
        heure = input("Entrez l'heure de départ (sous le format xx:xx) : ")
        print("Départ de " + depart + " prévu à " + str(conversion(heure)) + ".")            


#Je crée une classe station pour manipuler plus facilement les données
class Station:
    def __init__(self, num):
        self.nom = S[num][0] #nom de la station

        self.listeligne = []
        self.listevoisins = []
        self.listedistances = []

        for ligne in L :
            for i in range (0, len(ligne[2])): #numero des stations de la ligne
                station = ligne[2][i] #index de la station
                if station == num :
                    if i != len(ligne[2])-1 :
                        self.listevoisins.append(ligne[2][i+1])
                        self.listeligne.append(ligne[0])
                        self.listedistances.append(ligne[3][i])
                    if i != 0 :
                        self.listevoisins.append(ligne[2][i-1])
                        self.listeligne.append(ligne[0])
                        self.listedistances.append(ligne[3][i-1])
                    break

#Ensemble des stations :
listestations = [Station(i) for i in range (0, len(S))]


def Dijkstra (start, arrival, graphe):
    
    #On initialise toutes les distances à l'infini, sauf pour le départ
    distance = [float('inf')]*len(graphe)
    distance[start] = 0
    noeudcourant = start
    #On définit parent comme le noeud d'où l'on vient quand on est au noeud courant, ce qui va nous permettre en suite de reconstituer le chemin (qui sera le plus court chemin)
    parent = [0]*len(graphe)
    #On définit visite comme tous les noeuds qu'on a déjà visité
    visite = []

    while noeudcourant != arrival :
        stationcourante = graphe[noeudcourant]
        for i in range (0, len(stationcourante.listevoisins)) :
            voisin = stationcourante.listevoisins[i]
            if voisin in visite :
                continue
            nouvelledistance = distance[noeudcourant] + stationcourante.listedistances[i]
            if distance[voisin] > nouvelledistance :
                distance[voisin] = nouvelledistance
                parent[voisin] = noeudcourant

        visite.append(noeudcourant)

        minimum = float('inf')
        indice_minimum = 0
        for i in range (0, len(graphe)) :
            if i not in visite :
                if distance[i] < minimum :
                    minimum = distance[i]
                    indice_minimum = i
        noeudcourant = indice_minimum

    itineraire = []
    noeud = arrival
    while noeud != start : 
        itineraire.append(noeud)
        noeud = parent[noeud]
    itineraire.append(start)
    itineraire.reverse()
    
    #Lignes_stations renvoie toutes les lignes pour chaque station
    lignes_stations = []
    for station in itineraire:
            lignes_stations.append(Station(station).listeligne)
    #On enlève les doublons
    lignes_stations2 = []
    for i in range(len(lignes_stations)):
        l = []
        for j in range (len(lignes_stations[i])):
            if j == len(lignes_stations[i])-1 :
                l.append(lignes_stations[i][j])
            else :
                if lignes_stations[i][j] != lignes_stations[i][j+1] :
                    l.append(lignes_stations[i][j])
        lignes_stations2.append(l)


    #Lignes_itinéraire renvoie la liste des lignes qu'on va prendre (à chaque station)
    lignes_itinéraire = []
    for i in range(len(lignes_stations2)-1):
        j = 0
        while j < len(lignes_stations2[i]):
            if (lignes_stations2[i][j]  not in lignes_stations2[i+1]):
                j = j + 1
            elif (lignes_stations2[i][j] in lignes_stations2[i+1]):
                lignes_itinéraire.append(lignes_stations2[i][j])
                break

    #Correspondance affiche les indices des stations dans itinéraire où on fait des changements
    correspondance = []
    for k in range(len(lignes_itinéraire)-1):
        if lignes_itinéraire[k] != lignes_itinéraire[k+1]:
            correspondance.append(k+1)
    #Il faut ajouter un cas si les deux derniers sont égaux, car si oui ça ne le met pas dans la liste
    if lignes_itinéraire[len(lignes_itinéraire)-2] == lignes_itinéraire[len(lignes_itinéraire)-1]:
        correspondance.append(len(lignes_itinéraire))

    #Afficher un message avec la description des lignes à prendre
    message = ''
    for s in range(len(correspondance)):
        message += "Prenez la ligne " + lignes_itinéraire[correspondance[s]-1] + " jusqu'à la station " + S[itineraire[correspondance[s]]][0] + " puis "
    message_d_arrivée = "Vous êtes arrivé"

    return [itineraire, lignes_itinéraire, message, message_d_arrivée]
    
#Afficher l'itinéraire final
itinerairefinal = []
for station in Dijkstra(start,arrival,listestations)[0]:
    itinerairefinal.append(S[station][0])
print(itinerairefinal)
print(Dijkstra(start,arrival,listestations)[2], Dijkstra(start,arrival,listestations)[3])


Exemple de Vavin à Saint-Paul :
Itinéraire : Vavin --> Saint-Paul (Le Marais)
Départ de Vavin prévu à 15:35
['Vavin', 'Montparnasse-Bienvenue', 'Saint-Placide', 'Saint-Sulpice', 'Saint-Germain des Prés', 'Odéon', 'Saint-Michel', 'Cité', 'Châtelet', 'Hôtel de Ville', 'Saint-Paul (Le Marais)']
Prenez la ligne 4 jusqu'à la station Châtelet puis Prenez la ligne 1 jusqu'à la station Saint-Paul (Le Marais) puis  Vous êtes arrivé


#Classement des stations par ordre alphabétique --> Renvoie A du coup
s=[]
for i in range (0,len(S)) :
    s.append(S[i][0])
s.sort()


#Afficher le plan des métro parisiens
from PIL import Image
im = Image.open('plan_metro_paris.jpg')
im.show()

